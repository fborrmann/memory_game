<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE bookarticlearticlearticlearticle PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "../docbook-xml-4.5/docbookx.dtd">
<article>
  <articleinfo>
    <title>Dokumentation zum Praktikum XML-Technologie</title>
        
    <author>
      <firstname>Group</firstname>
      <surname>XSLT</surname>
      <affiliation>
      </affiliation>
    </author>
   </articleinfo>

	  	<sect1><title>Gliederung und Beschreibung der Ansichten</title>
	      Das Spiel ist logisch in 2 Ebenen unterteilt. Zunächst eine 
	      Lounge-Ansicht, in der Spielern offene Spiele angezeigt werden, sowie eine Highscore-Liste.
	      Die Lounge bietet die Möglichkeit, ein neues Spiel zu starten oder ein gespeichertes
	      Spiel fortzusetzen. Beim Start eines neuen Spiels, kann der Spieler auswählen, mit wie vielen Karten,
	      und Personen er spielen möchte. Jedem Mitspieler kann zudem ein Name gegeben werden.
	      Sobald ein Spiel gestartet wurde, wird die zweite Ebene, ein Spielfeld mit der gewünschten Kartenanzahl
	      angezeigt, wobei die Karten zu beginn alle verdeckt liegen, wenn es sich um ein neu gestartetes Spiel handelt. Zudem werden
	      die Spieler mit ihren aktuellen Punkten angezeigt, wobei der aktuelle Spieler farblich hervorgehoben ist.
	      Das Spiel kann zu jedem Zeitpunkt unterbrochen werden. Dabei kehrt das Spiel wieder in
	      die Lounge-Ansicht zurück. Das Spiel ist beendet, sobald alle Karten mit ihrem Bild nach oben liegen.
	      Daraufhin wird anstelle der Karten das Ergebnis des Spiels angezeigt.
	    </sect1>

	    <sect1><title> Elemente eines Spiels</title>
		  In der Spiele-Umgebung sind mehrere Elemente situationsabhängig und müssen damit definierte Zustände besitzen.
		  Dies sind zunächst die Spiel-Karten. Ihre beiden Zustände sind verdeckt und offen. Ihre Anzahl und damit ihre Position auf
		  dem Spielfeld muss zudem parametrisch beschrieben werden.
		  Auch die Anzeige des aktuellen Spielers muss durch Zustände beschrieben werden. Ein Spieler kann an der Reihe sein oder nicht.
		  Weiterhin ist die Anzahl der Spieler, sowie deren Punktestand parametrisch vorzuhalten.
		  Zuletzt muss der Spielstand mit Zustandsdaten beschrieben werden. Dies beeinhaltet die Info, wie viele Karten bereits aufgedeckt wurden.
		  Abhängig davon wird der Zustand definiert, ob das Spiel gespielt wird, oder ob es beendet ist, da alle Karten aufgedeckt wurden.
		  Auch die Funktionen speichern und abbrechen gehören zum Spiel, welche die Zustände des Spiels verändern.
		    <figure><title>Klassendiagramm zum Spiel</title>
		        <imageobject>
		            <imagedata scale="60" fileref="input/images/class_diagram.png"/>
		        </imageobject>
		    </figure>
	    </sect1>
	    
	    <sect1><title>Speicherung Spieldaten in Datenbanken</title>
			  Für die Speicherung der Daten werden in BaseX zwei Datenbanken angelegt: &quot;XSLT&quot;, welches die Informationen über
			  die erzeugten Spiele speichert und &quot;XSLT_highscores&quot; in welcher die Daten zur Bestenliste zu finden sind.
			  Diese Trennung ist keine Notwendigkeit für die gegebene Implementierung, sondern soll rein zur logischen Trennung der Daten dienen.
			  Eine logische Trennung der Daten ist sinnvoll, speziell wenn das Programm in der Zukfunft erweitert oder modifiziert wird.
			  Anfangs müssen beide Dantebanken mittels entsprechenden XML-Dateien initialisiert werden, welche weitestgehend
			  aus einem leeren Wurzelknoten bestehen. Wird anschließend in der Anwendung ein neues Spiel erzeugt, so wird dieses
			  mittels der XQuery Update Facility (bereitgestellt durch BaseX) als neuer Knoten in der XSLT Datenbank eingefügt.
			  Auf ähnliche Weise erfolgt die Speicherung der Ergebnisse in der Bestenliste. Da diese jedoch nur die besten zehn Ergebnisse speichern soll,
			  muss geprüft werden, ob ein Ergebniss in die Liste aufgenommen werden soll und ob dabei ein bestehender Wert verdrängt wird.
			  Die entsprechende Logik wird in der Funktion &quot;g:insertHighsScores&quot;, sowie deren Hilfsfunktion &quot;g:updateHighScores&quot; umgesetzt,
			  welche sich selbst der XQUF bedient um zunächst die alten Werte aus der Datenbank zu löschen und anschließend die neue Liste zurückzuschreiben.
	  	</sect1>
	  	<sect1><title>Interne Funktionen</title>
	  		<sect2><title>Erstellen neues Spiel</title>  
	  		  Wie in Kapitel 1 beschrieben, kann in der Lobby ein neues Spiel gestartet werden.
	  		  Die eingegebenen Daten (Spielernamen, Kartenanzahl) werden danach zusammen mit dem Zeitstempel als ID der 
	  		  Funktion newGameXML übergeben. In dieser wird das Spiel-Element, wie in Kapitel 2 beschrieben, aufgebaut. 
	  		  Die übergebene ID wird zur ID des Spiels, per Default ist der erste eingetragene Spieler der erste aktive Spieler
	  		  und für jeden eingetragenen Spieler-Namen wird ein Spieler-Knoten mit dem entsprechenden Namen und einer Punktezahl von Null angelegt.
	  		  Um für die gewählte Anzahl an Kartenpaaren die entsprechende Menge an Karten-Knoten zu erzeugen, wird innerhalb von newGameXML() die Methode
	  		  spreadCards() aufgerufen. Bei deren Aufruf werden zunächst abhängig von der Kartenanzahl die gewünschte Menge an Karten-Knoten 
	  		  mit korrekter ID und Paar-Nummer mit Hilfe der Funktion createCards() erzeugt und spreadCards() zusammen mit der Spalten- und Zeilenanzahl als Input übergeben.
	  		  Der Wert der Positions-Elemente ist jedoch für alle Karten zunächst noch Null.
	  		  Erst beim Durchlauf der Funktion spreadCards() werden den einzelnen Karten per Zufalls-Permutation Zeilen- und Spalten-Nummer zugewiesen.
			</sect2>
	  		<sect2><title>Anzeige Spiele und Highscores</title>  
	  		  In der Lobby sind wie in Kapitel 1 bedchrieben, die gespeicherten Spiele, als auch die Highscores anzuzeigen.
	  		  Diese Anzeigen werden jeweils mit den Funktionen SavedGamesList() und HighScoreList() ermöglicht.
	  		  Erstere läd alle gepeicherten Spiele aus der Datenbank und gibt für jedes dieser Spiele einen Knoten zurück, der ID und
	  		  die zusammengefassten Namen der Spieler des Spiels als Elemente enthält.
	  		  In HighScoreList () wird ein Knoten "highscores" mit allen in der Datenbank XSLT_highscores enthaltenene Spielern befüllt,
	  		  sortiert nach der Anzahl der Highscore-Punkte jedes enthaltenen Spielers.
	  		  Diese Knoten werden dann in der lobby.xml ausgelesen und der Reihe nach angezeigt.
			</sect2>
	  		<sect2><title>Spiellogik</title>
		      Eine zentrale Rolle im Memoryspiel und somit auch der Programmierung spielt die Funktion flipCard. Die einzige Handlungsmöglichkeit für die Spieler eines Memoryspiels ist es, eine Karte umzudrehen, wodurch gleichzeitig der weitere Spielverlauf beeinflusst wird.
			  Die Methode flipCard erhält als Parameter die eindeutige ID der Karte im Spiel, ändert den Spielzustand in der Datenbank wie im Folgenden erklärt entsprechend ab und erstellt damit mithilfe des SVG-Creators die entsprechende GUI und gibt diese anschließend zurück. Da Änderungen an der Datenbank erst mit dem Beenden der Methode durchgeführt bzw. sichtbar sind, müssen entsprechende Änderungen sowohl in der Datenbank als auch in einer lokalen Kopie des Spiele-Datensatzes durchgeführt werden. Letzterer wird anschließend an den SVG-Creator übergeben.
			  Zunächst wird überprüft, ob die Karte noch umgedreht auf dem Spielfeld liegt (@card_state=“hidden“). Trifft dies nicht zu, erfolgt keine Aktion und die Methode wird bereits wieder beendet, da die entsprechende Karte dementsprechend entweder aktuell bereits auf dem Spieltisch liegt oder zu einem bereits gefundenen Paar gehört und nicht mehr im Spiel ist.
			  Da zu einem Spielzug das Aufdecken von zwei Spielkarten gehört, wird nun überprüft, ob es sich hierbei um die erste oder zweite Karte des Zuges handelt. Im ersten Fall (first_card=0) wird die aktuell umgedrehte Karte als erste Karte markiert, das Spiel-Element first_card also auf die ID der Karte gesetzt. Außerdem wird die aktuelle Karte umgedreht (@card_state=“flipped“).
			  Wurde dagegen bereits eine Karte umgedreht, first_card also bereits mit einer Karten-ID belegt, wird geprüft, ob die beiden Karten ein Paar bilden, deren beiden group-Attribute also übereinstimmen. In diesem Fall werden dem aktuelle Spieler zwei Punkte gutgeschrieben, die Gruppen-ID im Spiel in lastpair gespeichert und beide Karten aus dem Spiel genommen. Hierfür werden ihre card_state-Attribute in der Datenbank auf „outofgame“ gesetzt, lokal auf „showandhide“, wodurch diese in der GUI zunächst aufgedeckt angezeigt und kurz darauf ausgeblendet werden. Außerdem muss an dieser Stelle überprüft werden, ob das Spiel hiermit bereits beendet ist. Dies geschieht durch die Überprüfung der Methode checkGameState, ob nun bereits alle Karten umgedreht wurden bzw. keine verdeckten Karten mehr auf dem Tisch liegen. Trifft dies zu, so wird der Zustand des Spiels (game_state) auf „finished“ gesetzt sowie die Gewinner des aktuellen Spiels ermittelt und im Spiele-Eintrag als <winners>-Element eingefügt. Außerdem werden über die Methode insertHighScores die Gewinner des Spiels bei Bedarf in die HighScores-Liste eingetragen.
			  Sollte es sich bei den beiden umgedrehten Karten um kein Paar handeln, ist der nächste Spieler am Zug und active_player_id wird entsprechend gesetzt. „firstCard“ wird zurückgesetzt und die Karten werden wieder umgedreht, in der Datenbank card_state also auf „covered“ gesetzt und lokal zwecks Anzeige des Motivs der Karten und anschließendem Umdrehen auf „showandflip“.
			  Der evtl. nun veränderte Eintrag zum aktuellen Spiel wird nun an den SVG-Creator übergeben, welcher die neue GUI erstellt. Anschließend wird diese zurückgegeben.
			  <figure><title>Klassendiagramm zum Spiel</title>
		        <imageobject>
		            <imagedata scale="60" fileref="input/images/FlipCard.jpg"/>
		        </imageobject>
		      </figure>
			</sect2>
	  	</sect1>
	    <sect1><title>Erstellung HTML Nodes mit XSLT</title>
			  Konzeptionell lässt sich das Spiel in zwei Bereiche einteilen: Zum einen existiert die Lobby, in der die Highscore-Liste zu finden ist,
			  neue Spiele erstellt und alte Spiele geladen werden können. Zum anderen gibt es die Darstellung für das Memory-Spiel selbst, mitsamt der Karten
			  und dem User-Interface. Diese  Zweiteilung lässt sich in ähnlicher Weise auch in der Implementierung wiederfinden,
			  wobei jedoch Unterschiede in der jeweiligen Umsetzung bestehen. Der statische Teil der Lobby liegt direkt als Datei(&quot;Lobby.xml&quot;) vor,
			  und nutzt RestXQ um die übrigen Elemente einzufügen (Highscoreliste, Liste der gespeicherten Spiele). Auch wird die Instanz des XForms-Modell
			  mittels RestXQ erzeugt. Für die Darstellung eines aktiven Spiels wird hingegen ein anderer Ansatz verfolgt, welcher sich
			  auf XSL Transformationen stützt um aus den Spieldaten die aktuelle Sicht zu erzeugen. Da diese Umsetzung alle nötigen Informationen
			  aus der Datenbank und der Session-ID bezieht, lässt sich das Laden und Speichern eines Spiels damit mit wenig zusätzlichem Aufwand realisieren.
			  Um aus den Daten die Ausgabe mittels eines XSL Stylesheets zu erzeugen wird die Funktion &quot;xslt:transform($input, $stylesheet)&quot; auf
			  die XML Daten angewendet. Diese verwendet als Default den Xalan Prozessor für die Transformationen, bzw. den Saxxon Prozessor, falls verfügbar.
			  Mittels des hier verwendete Stylesheet(&quot;svg_creator.xsl&quot;) erzeugt dieser Prozessor das XHTML Dokument (inklusive XForms-Modell und Kontrollen),
			  welches dem Nutzer anschließend durch den Browser als aktuelle Sicht angezeigt wird. Da XSLT unter anderem Schleifen unterstützt,
			  lässt sich auf diese Weise eine eindeutige Submission für jede Karte erzeugen, aufgrund derer übermittelt wird, welche Karte vom Spieler selektiert wurde.
			  Mittels &quot;xsl:choose&quot; kann eine Fallunterscheidung getroffen werden, um beispielsweise zu entscheiden, welche Seite
			  einer Karte angezeigt werden soll. Auch die finale Zusammenfassung der Spiels, inklusive der Bekanntgabe der Gewinner erfogt mittels des Stylesheets.
			  Die Neu-Erzeugung des Dokuments bringt für das Memory-Projekt einige Vorteile mit sich und zeigt akzeptable Performanz. Für größere Projekte sollten jedoch
			  weitere Optimierungen vorgenommen werden oder ein anderer Ansatz verfolgt werden, um ausreichend schnell auf Nutzer-Eingaben reagieren zu können.
	  	</sect1>
	  	<sect1><title>Kommunikation Client/Server</title>
	  	</sect1>	  	
	  	<sect1><title>Reflektion</title>
	  	  XML basiert auf der Idee, eine universelle Darstellung zur Verfügung zu stellen, mittels derer
			Anwendungen Daten austauschen können und dabei weiterhin durch einen einfach
			nachzuvollziehenden, hierarchischen Aufbau menschen-lesbar zu bleiben. Damit hat sich XML, neben
			vielen anderen Anwendungsbereichen, als eine Schlüsseltechnologie für das Internet erwiesen. Im
			Verlauf des Praktikums wurde deutlich, dass gerade durch die wenigen Regeln welche an ein XML
			Dokument gestellt werden eine Vielfalt von Anwedungsmöglichkeiten besteht. Da XML selbst dabei
			nur zur Representation von Daten dient, ohne dem Nutzer eine umfangreiche Syntax aufzuzwingen,
			existiert eine Vielzahl von Erweiterungen zur Manipulation und Verwaltung der Daten, welche
			ihrerseits eine Vielfalt an Anwedungsbreichen eröffnen. Die Umsetzung des Projekts stellte dabei durch
			die Vorgaben eine ganze Reihe neuer Herausforderungen bezüglich der Implementierung. So mussten
			viele einfache Basisfunktionen des Spiels, durch vergleichsweise komplexe RestXQ- und XQuery
			Funktionen nachgebildet werden. Auch das Auffinden von Fehlern im Code war weitaus komplizierter,
			da in vielen Fällen wenig Informationen über die Ursache bereitgestellt werden konnten. Umso
			wichtiger wurde ein guter Überblick über den Programmablauf und ein sehr feines iterieren des Codes.
			Obwohl in diesem Projekt viele der Anforderungen künstlich gegeben waren, zeigten sich damit sehr
			deutlich auch viele praktische Engineering-Aspekte, da auch in der Praxis die Freiheitsgrade der
			Implementierung durch eine Vielzahl bestehender Requirements eingeschränkt sind.
	  	</sect1>

 

</article>
